
# Install AWS CLI
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html

# Install kubectl and eksctl
https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html

# Create docker network
docker network create test

# Enter eks folder
cd eks

# Build TF serving image
docker build -t tf-serving-traffic-sign-classification-model -f Dockerfile.tfserving .

# Build gateway image
docker build -t serving-gateway -f Dockerfile.gateway .

# Run TF serving image locally
docker run --network test -p 8500:8500 --name tf-serving-traffic-sign-classification-model -t tf-serving-traffic-sign-classification-model

# Run gateway image locally
docker run --network test -p 9696:9696 --name serving-gateway -t serving-gateway

# Configure AWS CLI
aws configure

Provide:

AWS Access Key ID
AWS Secret Access Key
Default region name
Default output format

# Create ECR repository
aws ecr create-repository --repository-name model-serving

It returns the following:
<ACCOUNT>.dkr.ecr.<REGION>.amazonaws.com/model-serving

# Authenticate with ECR
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <ACCOUNT ID>.dkr.ecr.<REGION>.amazonaws.com

It must return
Login Succeeded

# Tag images
docker tag serving-gateway <ACCOUNT ID>.dkr.ecr.<REGION>.amazonaws.com/model-serving:serving-gateway
docker tag tf-serving-traffic-sign-classification-model <ACCOUNT ID>.dkr.ecr.<REGION>.amazonaws.com/model-serving:tf-serving-traffic-sign-classification-model

# Push images
docker push <ACCOUNT ID>.dkr.ecr.<REGION>.amazonaws.com/model-serving:serving-gateway
docker push <ACCOUNT ID>.dkr.ecr.<REGION>.amazonaws.com/model-serving:tf-serving-traffic-sign-classification-model

# Create kubernetes cluster
eksctl create cluster -f cluster.yaml

# Make kubectl access the newly created cluster
aws eks --region <REGION> update-kubeconfig --name tsc-eks

# Check status
kubectl get service

# Add tf-serving to kubernetes cluster
kubectl apply -f tf-serving-traffic-sign-classification-deployment.yaml

# Add tf-serving service to kubernetes cluster
kubectl apply -f tf-serving-traffic-sign-classification-service.yaml

# Add serving-gateway to kubernetes cluster
kubectl apply -f serving-gateway-deployment.yaml

# Add serving-gateway service to kubernetes cluster
kubectl apply -f serving-gateway-service.yaml

# Find service external URL
kubectl describe service serving-gateway

we see the value in the LoadBalancer Ingress line, eg
a8890f67a9ca24353a8c8b53653d442e-140471327.us-east-1.elb.amazonaws.com

# Build streamlit app image
docker build -t streamlit_eks -f Dockerfile.streamlit .

# Run streamlit app
docker run -p 8501:8501 --name streamlit_eks -t streamlit_eks

# Check deployments
kubectl get deployments

# Chek pods
kubectl get pods

# Check services
kubectl get services

# Delete cluster
eksctl version
kubectl get svc --all-namespaces
kubectl delete svc service-name
eksctl delete cluster --name prod